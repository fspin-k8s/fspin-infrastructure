#!/bin/bash
# Publish a Build Based on latest_snapshot in repo
# - Clean out old releases
# - Create a release candidate for the mirrors to sync
# - Clean out all old builds
set -x
export SNAPSHOT_ID=$(wget -q -O - https://repo.fspin.org/latest_snapshot)
if [[ ! ${SNAPSHOT_ID+x} ]]; then exit 1; fi
export SPIN_ID=`echo ${SNAPSHOT_ID}|awk -F- -v OFS='-' '{print $1,$2,$3}'` && \
export RELEASE_STRING=`echo ${SPIN_ID}|sed 's/-//g'` && \
export RESULTS_LOCATION="gs://build-results.fspin.org/releases/" && \
export TMP_LOCATION="gs://build-results.fspin.org/${SPIN_ID}/" && \
export NUM_RELEASES=2 && \
mkdir -p ${SPIN_ID} && \
envsubst '${SPIN_ID}' < "README.template" > "${SPIN_ID}/README.md" && \
echo "export SPIN_ID=${SPIN_ID}" > release_id && \
pushd ${SPIN_ID} && \
echo "Checking build-results for ${SPIN_ID}..." && \
gsutil ls gs://build-results.fspin.org/{live,source}/*/CHECKSUM512-*${RELEASE_STRING}* || \
{ echo "ERROR: No build-results found for ${SPIN_ID}!"; exit 1; }
echo "Downloading checksums for ${SPIN_ID}..." && \
gsutil -m cp -c gs://build-results.fspin.org/{live,source}/*/CHECKSUM512-*${RELEASE_STRING}* . && \
echo "Combining checksums for ${SPIN_ID}..." && \
cat CHECKSUM512-* >> CHECKSUM512-${RELEASE_STRING} && \
echo "Downloading tracker hashfiles for ${SPIN_ID}..." && \
gsutil -m cp -c gs://build-results.fspin.org/live/*/*${RELEASE_STRING}*-torrenthash . && \
echo "Creating tracker hashfile for ${SPIN_ID}..." && \
cat *-torrenthash >> torrenthashes-${RELEASE_STRING} && \
echo "Preparing ${SPIN_ID} in ${TMP_LOCATION}..." && \
gsutil cp -c CHECKSUM512-${RELEASE_STRING} ${TMP_LOCATION} && \
gsutil cp -c torrenthashes-${RELEASE_STRING} ${TMP_LOCATION} && \
gsutil -m cp -c -r gs://build-results.fspin.org/{live,source}/*${SPIN_ID}*/*.iso ${TMP_LOCATION} && \
gsutil -m cp -c -r gs://build-results.fspin.org/live/*${SPIN_ID}*/*.{torrent,caibx} ${TMP_LOCATION} && \
gsutil cp -c README.md ${TMP_LOCATION} && \
echo "Cleaning out old releases and builds..." && \
gsutil -m rm -r gs://build-results.fspin.org/{live,source} && \
releases=(); while read i; do releases+=("$i"); done < <(gsutil ls ${RESULTS_LOCATION}|sort -r) && \
for release in ${releases[@]:${NUM_RELEASES}-1}; do gsutil -m rm -r $release; done
echo "Publishing ${SPIN_ID} to ${RESULTS_LOCATION}" && \
gsutil -m mv ${TMP_LOCATION} ${RESULTS_LOCATION} && \
echo "SUCCESS: Results located at ${RESULTS_LOCATION}${SPIN_ID}/"
